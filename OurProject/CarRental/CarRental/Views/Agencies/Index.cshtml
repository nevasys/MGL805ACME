@model IEnumerable<CarRental.Models.Agency>
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Liste des Agences</h2>

<p>
  @*  @Html.ActionLink("Ajouter une agence", "New") *@
</p>

<ul>
    
    @foreach (var agency in Model)
    {
        <li>
            @agency.Name  (@agency.Division) @agency.CivicNumber @agency.StreetName @agency.Suite @agency.City @agency.Province @agency.PostalCode
            @* @Html.ActionLink("Editer", "Edit", new { id = agency.Id }) |
                @Html.ActionLink("Effacer", "Delete", new { id = agency.Id }) *@
        </li>
    }

</ul>

<script src="http://maps.google.com/maps/api/js?sensor=true&key=AIzaSyBi4VLEKTsbXCbsrs2IMJLopB5jlXtFi24 " type="text/javascript"></script>

<!-- This css is to ensure that the google map contols (zoom bar etc) show and size correctly. -->
<style>
    #map_canvas img {
        max-width: none;
    }
</style>

<!-- This css is to give a nice big popup "info window" when a marker is clicked on the map -->
<style>
    .infoDiv {
        height: 200px;
        width: 300px;
        -webkit-user-select: none;
        background-color: white;
    }
</style>


<!-- This is the div that will contain the Google Map -->
<div id="map_canvas" style="height: 600px;"></div>

 @section scripts {
    <section class="scripts">

        <script type="text/javascript">

    <!-- This code tells the browser to execute the "Initialize" method only when the complete document model has been loaded. -->
    $(document).ready(function () {
        Initialize();
    });

    // Where all the fun happens
            function Initialize() {

                var geocoder = new google.maps.Geocoder();
                var address = "Canada";
                var latitude ;
                var longitude;
                var latlng;
                var map;

                geocoder.geocode( { 'address': address}, function(results, status) {

                    if (status == google.maps.GeocoderStatus.OK) {
                        latitude = results[0].geometry.location.lat();
                        longitude = results[0].geometry.location.lng();


                        //SetMap(latitude,longitude);
                        latlng = new google.maps.LatLng(latitude,longitude);

                        var myOptions = {
                            zoom: 4,
                            center: latlng,
                            mapTypeId: google.maps.MapTypeId.ROADMAP,
                            mapTypeControl: false
                        };
                        map = new google.maps.Map(document.getElementById("map_canvas"),myOptions);
                    }



                    //var marker = new google.maps.Marker({
                    //    position: latlng,
                    //    map: map,
                    //    title: 'Central'
                    //});


                   //
                    // {
                    var addr;
                    @foreach (var agency in Model)
                        {
                            var addr = agency.CivicNumber + " " + agency.StreetName + ", " + agency.City;




                        }

                    if (status == google.maps.GeocoderStatus.OK) {
                        latitude = results[0].geometry.location.lat();
                        longitude = results[0].geometry.location.lng();


                        //SetMap(latitude,longitude);
                        latlng = new google.maps.LatLng(latitude,longitude);

                        var myOptions = {
                            zoom: 4,
                            center: latlng,
                            mapTypeId: google.maps.MapTypeId.ROADMAP,
                            mapTypeControl: false
                        };
                        map = new google.maps.Map(document.getElementById("map_canvas"),myOptions);
                    }
                   // }



              



                //function SetMap(latitude,longitude) {


                //}



        //// Google has tweaked their interface somewhat - this tells the api to use that new UI
        //google.maps.visualRefresh = true;
        ////var Liverpool = new google.maps.LatLng(53.408841, -2.981397);
        //var Liverpool = new google.maps.LatLng(45.494962, -73.561878);

        //// These are options that set initial zoom level, where the map is centered globally to start, and the type of map to show
        //var mapOptions = {
        //    zoom: 14,
        //    center: Liverpool,
        //    mapTypeId: google.maps.MapTypeId.G_NORMAL_MAP
        //};

        //// This makes the div with id "map_canvas" a google map
        //var map = new google.maps.Map(document.getElementById("map_canvas"), mapOptions);

        //// This shows adding a simple pin "marker" - this happens to be the Tate Gallery in Liverpool!
        ////var myLatlng = new google.maps.LatLng(53.40091, -2.994464);
        //// ETS
        //var myLatlng ;//= new google.maps.LatLng(45.494962, -73.561878);

        //var abc = new google.maps.Geocoder();
        //var address = 'H7V2X9'; //abc.geocode({address: 'H7V2X9'}, function(results, status));


        //geocoder.geocode( { 'address': address}, function(results, status) {

        //        if (status == google.maps.GeocoderStatus.OK) {
        //            var latitude = results[0].geometry.location.lat();
        //            var longitude = results[0].geometry.location.lng();

        //            myLatlng = new google.maps.LatLng(latitude, longitude);
        //            //initialize(latitude,longitude);

        //        }

        //});

        //var marker = new google.maps.Marker({
        //    position: myLatlng,
        //    map: map,
        //    title: 'Tate Gallery'
        //});

        // You can make markers different colors...  google it up!
        marker.setIcon('http://maps.google.com/mapfiles/ms/icons/green-dot.png')

         //a sample list of JSON encoded data of places to visit in Liverpool, UK
         //you can either make up a JSON list server side, or call it from a controller using JSONResult
        //var data = [
        //          { "Id": 1, "PlaceName": "Liverpool Museum", "OpeningHours":"9-5, M-F","GeoLong": "53.410146", "GeoLat": "-2.979919" },
        //          { "Id": 2, "PlaceName": "Merseyside Maritime Museum ", "OpeningHours": "9-1,2-5, M-F", "GeoLong": "53.401217", "GeoLat": "-2.993052" },
        //          { "Id": 3, "PlaceName": "Walker Art Gallery", "OpeningHours": "9-7, M-F", "GeoLong": "53.409839", "GeoLat": "-2.979447" },
        //          { "Id": 4, "PlaceName": "National Conservation Centre", "OpeningHours": "10-6, M-F", "GeoLong": "53.407511", "GeoLat": "-2.984683" }
        //       ];

        //var data = $.ajax({
        //    url: "/Agencies/GetAgencyDataJson",
        //                    type: "GET",
        //                    dataType: 'html',
        //                    data: { Category: "All" }, // the value id for call your controller
        //                    success: function (data) {
        //                        // make sure your result variable is enumerable.
        //                        $(data).each(function (index, element) {
        //                            $("#bottom-area-trend-charts div").append("<p>" + element.Name + "</p>");
        //                        });
        //                    },
        //                    error: function (xqr, errorMessage) {
        //                        alert(errorMessage);
        //                    }
        //});

        var data = $.ajax({
            url: "/Agencies/GetAgencyDataJson",
            type: "GET",
            dataType: 'json',
            data: { Category: "All" }, // the value id for call your controller
            success: function (data) {
                //Do stuff with the JSON data
                console.debug("%o", data);
            },
            error: function (xqr, errorMessage) {
                alert(errorMessage);
            }
        });

            // Using the JQuery "each" selector to iterate through the JSON list and drop marker pins
        $.each(data, function (i, item) {
                var marker = new google.maps.Marker({
                    'position': new google.maps.LatLng(item.GeoLong, item.GeoLat),
                    'map': map,
                    'title': item.Name
                });

            // Make the marker-pin blue!
            marker.setIcon('http://maps.google.com/mapfiles/ms/icons/blue-dot.png')

            // put in some information about each json object - in this case, the opening hours.
            var infowindow = new google.maps.InfoWindow({
                content: "<div class='infoDiv'><h2>" + item.Name + "</h2>" + "<div><h4>Opening hours: " + item.Name + "</h4></div></div>"
            });

            // finally hook up an "OnClick" listener to the map so it pops up out info-window when the marker-pin is clicked!
            google.maps.event.addListener(marker, 'click', function () {
                infowindow.open(map, marker);
            });

        })

                });

    }


        </script>
    </section>
}